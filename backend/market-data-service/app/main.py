"""
Market Data Service - Aplica√ß√£o Principal.

Este m√≥dulo configura e inicializa o microservi√ßo de Market Data,
incluindo middleware, CORS, documenta√ß√£o autom√°tica e tratamento de erros.

Example:
    # Executar o servi√ßo
    uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
"""

import time
from contextlib import asynccontextmanager
from datetime import datetime

from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from core.config import settings
from core.logging import get_logger
from models.responses import ErrorResponse
from api.market_data import router as market_data_router

# Configurar logger
logger = get_logger(__name__)

# Vari√°vel para tracking de uptime
startup_time = time.time()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o.

    Executa tarefas de inicializa√ß√£o e finaliza√ß√£o do servi√ßo,
    incluindo configura√ß√£o de recursos e limpeza de conex√µes.

    Args:
        app: Inst√¢ncia da aplica√ß√£o FastAPI
    """
    # Startup
    logger.info("üöÄ Iniciando Market Data Service...")
    logger.info(f"üìä Vers√£o: {settings.API_VERSION}")
    logger.info(f"üîß Debug Mode: {settings.DEBUG}")
    logger.info(f"üîó CORS Origins: {settings.ALLOWED_ORIGINS}")

    # Aqui podem ser adicionadas tarefas de inicializa√ß√£o como:
    # - Conex√µes com databases
    # - Inicializa√ß√£o de cache
    # - Verifica√ß√£o de servi√ßos externos
    # - Pr√©-carregamento de dados

    try:
        # Teste b√°sico de funcionalidade
        logger.info("‚úÖ Servi√ßos inicializados com sucesso")
        logger.info(f"üåê Servidor rodando em {settings.HOST}:{settings.PORT}")

    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
        raise

    yield

    # Shutdown
    logger.info("üõë Finalizando Market Data Service...")
    logger.info("‚úÖ Recursos liberados com sucesso")


# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=settings.API_TITLE,
    description=settings.API_DESCRIPTION,
    version=settings.API_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan,
    # Metadata adicional para documenta√ß√£o
    contact={
        "name": "BullCapital Team",
        "email": "dev@bullcapital.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    servers=[
        {"url": f"http://localhost:{settings.PORT}", "description": "Desenvolvimento"},
        {"url": "https://api.bullcapital.com", "description": "Produ√ß√£o"},
    ],
)

# Incluir routers
app.include_router(market_data_router, prefix="/api/v1/market-data", tags=["Market Data"])

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["X-Request-ID", "X-Rate-Limit-Remaining"],
)


# Middleware para logging de requisi√ß√µes
@app.middleware("http")
async def request_logging_middleware(request: Request, call_next):
    """
    Middleware para logging detalhado de requisi√ß√µes.

    Registra informa√ß√µes sobre cada requisi√ß√£o incluindo tempo de processamento,
    status de resposta e dados relevantes para monitoramento.

    Args:
        request: Objeto de requisi√ß√£o HTTP
        call_next: Pr√≥ximo middleware na cadeia

    Returns:
        Response HTTP com headers adicionais
    """
    start_time = time.time()

    # Gerar ID √∫nico para a requisi√ß√£o
    request_id = f"{int(start_time * 1000)}-{hash(str(request.url)) % 10000}"

    # Log da requisi√ß√£o
    logger.info(
        f"üì• {request.method} {request.url.path} "
        f"[{request_id}] from {request.client.host if request.client else 'unknown'}"
    )

    try:
        # Processar requisi√ß√£o
        response = await call_next(request)

        # Calcular tempo de processamento
        process_time = time.time() - start_time

        # Adicionar headers de resposta
        response.headers["X-Request-ID"] = request_id
        response.headers["X-Process-Time"] = f"{process_time:.3f}"

        # Log da resposta
        logger.info(
            f"üì§ {request.method} {request.url.path} "
            f"[{request_id}] {response.status_code} "
            f"({process_time:.3f}s)"
        )

        return response

    except Exception as e:
        # Log de erro
        process_time = time.time() - start_time
        logger.error(
            f"üí• {request.method} {request.url.path} "
            f"[{request_id}] ERROR: {str(e)} "
            f"({process_time:.3f}s)"
        )
        raise


# Middleware para rate limiting headers
@app.middleware("http")
async def rate_limit_headers_middleware(request: Request, call_next):
    """
    Middleware para adicionar headers de rate limiting.

    Adiciona informa√ß√µes sobre limites de taxa nas respostas,
    permitindo que clientes monitorem seu uso da API.

    Args:
        request: Objeto de requisi√ß√£o HTTP
        call_next: Pr√≥ximo middleware na cadeia

    Returns:
        Response HTTP com headers de rate limiting
    """
    response = await call_next(request)

    # Adicionar headers de rate limiting
    response.headers["X-Rate-Limit-Limit"] = str(settings.RATE_LIMIT_REQUESTS)
    response.headers["X-Rate-Limit-Window"] = str(settings.RATE_LIMIT_WINDOW)

    # Em uma implementa√ß√£o real, voc√™ calcularia os valores reais baseado
    # no rate limiter do servi√ßo
    response.headers["X-Rate-Limit-Remaining"] = "95"  # Placeholder
    response.headers["X-Rate-Limit-Reset"] = str(int(time.time() + 60))  # Placeholder

    return response


# Handler global para exce√ß√µes n√£o tratadas
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """
    Handler global para exce√ß√µes n√£o tratadas.

    Captura todas as exce√ß√µes que n√£o foram tratadas especificamente
    e retorna uma resposta estruturada consistente.

    Args:
        request: Objeto de requisi√ß√£o HTTP
        exc: Exce√ß√£o capturada

    Returns:
        JSONResponse com detalhes do erro
    """
    logger.error(f"Exce√ß√£o n√£o tratada: {str(exc)}", exc_info=True)

    error_response = ErrorResponse(
        error="INTERNAL_SERVER_ERROR",
        message="Erro interno do servidor",
        details={"path": str(request.url.path)} if settings.DEBUG else None,
        timestamp=datetime.now().isoformat(),
    )

    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, content=error_response.dict()
    )


# Handler para 404 (Not Found)
@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """
    Handler personalizado para 404 Not Found.

    Args:
        request: Objeto de requisi√ß√£o HTTP
        exc: Exce√ß√£o 404

    Returns:
        JSONResponse com mensagem amig√°vel
    """
    error_response = ErrorResponse(
        error="NOT_FOUND",
        message=f"Endpoint '{request.url.path}' n√£o encontrado",
        details={
            "available_endpoints": [
                "/docs",
                "/api/v1/market-data/",
                "/api/v1/market-data/stocks/{symbol}",
                "/api/v1/market-data/stocks/search",
                "/api/v1/market-data/multi-info",
                "/api/v1/market-data/multi-history",
                "/api/v1/market-data/{symbol}/history",
                "/api/v1/market-data/{symbol}/info",
                "/api/v1/market-data/{symbol}/fulldata",
                "/api/v1/market-data/search",
                "/api/v1/market-data/period-performance",
                "/api/v1/market-data/health",
            ]
        },
        timestamp=datetime.now().isoformat(),
    )

    return JSONResponse(
        status_code=status.HTTP_404_NOT_FOUND, content=error_response.dict()
    )



# Endpoints raiz
@app.get(
    "/",
    summary="Informa√ß√µes do Market Data Service",
    description="Retorna informa√ß√µes b√°sicas e status do servi√ßo.",
)
async def root():
    """
    Endpoint raiz com informa√ß√µes do servi√ßo.

    Returns:
        Informa√ß√µes b√°sicas sobre o Market Data Service
    """
    uptime = time.time() - startup_time

    return {
        "service": "Market Data Service",
        "version": settings.API_VERSION,
        "status": "running",
        "uptime_seconds": round(uptime, 2),
        "timestamp": datetime.now().isoformat(),
        "endpoints": {
            "documentation": "/docs",
            "api": "/api/v1/market-data/",
            "yfinance": "/api/v1/yfinance/",
            "frontend": "/api/v1/frontend/",
            "health": "/health",
            "ping": "/ping",
        },
        "features": [
            "Real-time stock data",
            "Historical price data", 
            "Complete YFinance API integration",
            "Financial statements (DRE, Balan√ßo, Fluxo de Caixa)",
            "Dividends and splits tracking",
            "Analyst recommendations",
            "Options chains",
            "ESG and sustainability data",
            "Technical analysis indicators",
            "Multi-ticker comparisons",
            "Stock search and validation",
            "Bulk data requests",
            "Rate limiting",
            "Caching",
            "Comprehensive API documentation",
        ],
    }


@app.get(
    "/health",
    summary="Health Check",
    description="Verifica se o servi√ßo est√° funcionando corretamente.",
)
async def health_check():
    """
    Health check endpoint para monitoramento.

    Returns:
        Status do servi√ßo
    """
    return {
        "status": "healthy",
        "service": "Market Data Service",
        "version": settings.API_VERSION,
        "timestamp": datetime.now().isoformat(),
    }


@app.get(
    "/ping",
    summary="Verifica√ß√£o b√°sica de conectividade",
    description="Endpoint simples para verificar se o servi√ßo est√° respondendo.",
)
async def ping():
    """
    Endpoint simples de ping.

    Returns:
        Resposta b√°sica de pong com timestamp
    """
    return {
        "message": "pong",
        "timestamp": datetime.now().isoformat(),
        "service": "market-data-service",
    }


# Configura√ß√£o adicional para desenvolvimento
if settings.DEBUG:
    logger.info("üîß Modo DEBUG ativado")

    @app.get("/debug/config")
    async def debug_config():
        """Endpoint de debug para visualizar configura√ß√µes (apenas desenvolvimento)."""
        return {
            "debug": settings.DEBUG,
            "api_version": settings.API_VERSION,
            "allowed_origins": settings.ALLOWED_ORIGINS,
            "cache_enabled": settings.ENABLE_CACHE,
            "cache_ttl": settings.CACHE_TTL_SECONDS,
            "rate_limit_requests": settings.RATE_LIMIT_REQUESTS,
            "rate_limit_window": settings.RATE_LIMIT_WINDOW,
        }


# Punto de entrada para executar com uvicorn
if __name__ == "__main__":
    import uvicorn

    logger.info(f"üöÄ Iniciando servidor em {settings.HOST}:{settings.PORT}")

    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower(),
        access_log=True,
    )
