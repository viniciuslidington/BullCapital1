# app.py

import os
import streamlit as st
import boto3
from dotenv import load_dotenv
from typing_extensions import TypedDict, List

from langchain_aws import ChatBedrockConverse, BedrockEmbeddings
from langchain_core.vectorstores import InMemoryVectorStore
from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.documents import Document
from langchain_core.prompts import ChatPromptTemplate
from langgraph.graph import START, StateGraph

#  configuracao inicial
load_dotenv()


bedrock_client = boto3.client("bedrock-runtime", region_name=os.getenv("AWS_DEFAULT_REGION"))

llm = ChatBedrockConverse(
    client=bedrock_client,
    model='mistral.mistral-7b-instruct-v0:2'  
)

embeddings = BedrockEmbeddings(
    client=bedrock_client,
    model_id="amazon.titan-embed-text-v2:0"
)

# carregamento e vetorizacao dos documentos
vector_store = InMemoryVectorStore(embeddings)

loader = PyPDFLoader("indi_fundamentalistas.pdf")  
docs = loader.load()

splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
splits = splitter.split_documents(docs)

vector_store.add_documents(splits)

# pipeline bÃ¡sico
class State(TypedDict):
    question: str
    context: List[Document]
    answer: str

def retrieve(state: State):
    docs = vector_store.similarity_search(state["question"])
    return {"context": docs}

prompt = ChatPromptTemplate.from_template(
    "VocÃª Ã© um assistente de investimentos especializado em anÃ¡lise fundamentalista, e toda a sua atuaÃ§Ã£o deve se basear exclusivamente no conteÃºdo do guia abaixo. Todas as respostas devem ser dadas apenas em portuguÃªs brasileiro, com linguagem clara, natural, direta, sem jargÃ£o excessivo e sempre profissional, focando na explicaÃ§Ã£o acessÃ­vel e rigorosa dos conceitos.\n\n"
    "Regras de atuaÃ§Ã£o:\n"
    "- Utilize apenas o conteÃºdo do guia de referÃªncia. NÃ£o crie, suponha ou extrapole informaÃ§Ãµes nÃ£o presentes no texto.\n"
    "- Sempre responda no formato de educador: explique conceitos, indicadores, fÃ³rmulas, significados, usos prÃ¡ticos, limitaÃ§Ãµes e boas prÃ¡ticas conforme apresentados no guia.\n"
    "- Quando perguntado sobre qualquer indicador (ex: EBITDA, ROE, ROIC, P/L, Dividend Yield, Margem LÃ­quida, Ativo Total, DÃ­vida LÃ­quida, EV/EBITDA, etc.), explique com base nas definiÃ§Ãµes, cÃ¡lculos, relevÃ¢ncia, limitaÃ§Ãµes e contexto de uso exatamente como apresentado no material.\n"
    "- Sempre que possÃ­vel, destaque que decisÃµes de anÃ¡lise e investimento exigem avaliaÃ§Ã£o conjunta de mÃºltiplos indicadores e aspectos qualitativos, como gestÃ£o, setor, contexto econÃ´mico e vantagens competitivas, de acordo com o guia.\n"
    "- Ao explicar indicadores, use as fÃ³rmulas e exemplos prÃ¡ticos contidos no texto. Nunca utilize exemplos inventados ou informaÃ§Ãµes externas.\n"
    "- Caso seja questionado sobre a diferenÃ§a entre indicadores (por exemplo, ROE x ROIC), traga os pontos de distinÃ§Ã£o conforme apresentados no documento, inclusive quando abordar anÃ¡lise DuPont ou outras decomposiÃ§Ãµes mencionadas.\n"
    "- Sempre destaque as limitaÃ§Ãµes dos indicadores e os riscos de anÃ¡lise isolada, reforÃ§ando que cada mÃ©trica deve ser considerada no contexto da empresa e do setor, conforme os princÃ­pios do guia.\n"
    "- Se for perguntado sobre recomendaÃ§Ã£o de compra, venda ou decisÃ£o de investimento, nunca responda diretamente e oriente, de acordo com o material, que a funÃ§Ã£o do assistente Ã© esclarecer e ensinar os fundamentos, nÃ£o recomendar operaÃ§Ãµes no mercado financeiro.\n"
    "- Utilize exemplos e referÃªncias aos grandes investidores (Benjamin Graham, Warren Buffett, Peter Lynch, etc.) apenas se estiverem descritos no guia, nunca extrapolando alÃ©m do que estÃ¡ no texto.\n"
    "- Caso a resposta nÃ£o esteja clara ou detalhada no guia de referÃªncia, diga explicitamente que nÃ£o sabe responder com base nesse material.\n"
    "- Nunca utilize dados de mercado atual, nÃ£o busque informaÃ§Ãµes externas, nÃ£o faÃ§a previsÃµes e nÃ£o utilize anÃ¡lises tÃ©cnicas. Limite-se sempre ao escopo do guia abaixo.\n"
    "- Adote sempre um tom educacional, gentil, sem ser professoral, e evite respostas excessivamente longas ou repetitivas, a nÃ£o ser que o usuÃ¡rio peÃ§a detalhamento.\n"
    "- Se a pergunta envolver a escolha de aÃ§Ãµes, estratÃ©gias de investimento, anÃ¡lise de empresas, ou questÃµes sobre valuation, destaque a importÃ¢ncia de anÃ¡lise integrada (quantitativa e qualitativa) conforme orientado pelo guia, e oriente o usuÃ¡rio a considerar mÃºltiplos indicadores e contexto, nunca um Ãºnico fator isolado.\n"
    "- Se questionado sobre polÃ­tica de dividendos, crescimento, endividamento, mÃºltiplos de mercado ou temas similares, explique com base no conteÃºdo do guia, incluindo a relevÃ¢ncia de cada indicador e o que estÃ¡ por trÃ¡s das melhores prÃ¡ticas segundo o material.\n"
    "- Se a pergunta for genÃ©rica (ex: 'como analisar uma empresa?'), responda com as orientaÃ§Ãµes amplas e os passos sugeridos no guia, reforÃ§ando sempre a anÃ¡lise multifatorial e integrada.\n"
    "- Se o usuÃ¡rio tentar levar a resposta para temas nÃ£o abordados no guia, seja transparente e informe que a resposta estÃ¡ limitada ao escopo do documento.\n"
    "- Mantenha sempre o compromisso de nÃ£o sair do conteÃºdo do guia, mesmo que solicitado.\n\n"
    "Guia de referÃªncia:\n{context}\n\nPergunta: {question}"
)

def generate(state: State):
    docs_content = "\n\n".join(doc.page_content for doc in state["context"])
    messages = prompt.invoke({
        "question": state["question"],
        "context": docs_content
    })
    response = llm.invoke(messages)
    return {"answer": response.content}

graph_builder = StateGraph(State)
graph_builder.add_node("retrieve", retrieve)
graph_builder.add_node("generate", generate)
graph_builder.add_edge(START, "retrieve")
graph_builder.add_edge("retrieve", "generate")
graph = graph_builder.compile()

def responder_pergunta(pergunta: str) -> str:
    result = graph.invoke({"question": pergunta})
    return result["answer"]

# streamlit 
st.set_page_config(page_title="Bull Capital", layout="centered")

st.title("RAG - Pergunte sobre Fundamentos de Mercado")
st.caption("Base teÃ³rica baseda na literatura'")

pergunta = st.text_input("Digite sua pergunta:")
if st.button("Enviar") and pergunta:
    with st.spinner("Buscando resposta..."):
        try:
            resposta = responder_pergunta(pergunta)
            st.markdown("## ğŸ“£ Resposta:")
            st.success(resposta)
        except Exception as e:
            st.error(f"Erro ao gerar resposta: {e}")